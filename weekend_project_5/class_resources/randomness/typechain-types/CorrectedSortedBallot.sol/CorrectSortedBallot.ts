/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface CorrectSortedBallotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "proposals"
      | "proposalsBeingSorted"
      | "restartSorting"
      | "savedIndex"
      | "sortProposals"
      | "sorted"
      | "sortedWords"
      | "swaps"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsBeingSorted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "restartSorting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "savedIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sortProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sorted", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sortedWords",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "swaps", values?: undefined): string;

  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalsBeingSorted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restartSorting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "savedIndex", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sorted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sortedWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swaps", data: BytesLike): Result;
}

export interface CorrectSortedBallot extends BaseContract {
  connect(runner?: ContractRunner | null): CorrectSortedBallot;
  waitForDeployment(): Promise<this>;

  interface: CorrectSortedBallotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;

  proposalsBeingSorted: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;

  restartSorting: TypedContractMethod<[], [void], "nonpayable">;

  savedIndex: TypedContractMethod<[], [bigint], "view">;

  sortProposals: TypedContractMethod<
    [steps: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  sorted: TypedContractMethod<[], [boolean], "view">;

  sortedWords: TypedContractMethod<[], [bigint], "view">;

  swaps: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "proposalsBeingSorted"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "restartSorting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "savedIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sortProposals"
  ): TypedContractMethod<[steps: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "sorted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "sortedWords"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "swaps"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}

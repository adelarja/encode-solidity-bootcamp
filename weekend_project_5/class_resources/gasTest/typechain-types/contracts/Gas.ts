/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GasInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createPacked"
      | "createUnpacked"
      | "highScore"
      | "loopActions"
      | "updateNumber"
      | "updateNumberOptimized"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPacked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createUnpacked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "highScore", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "loopActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNumberOptimized",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createUnpacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "highScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "loopActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNumberOptimized",
    data: BytesLike
  ): Result;
}

export interface Gas extends BaseContract {
  connect(runner?: ContractRunner | null): Gas;
  waitForDeployment(): Promise<this>;

  interface: GasInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createPacked: TypedContractMethod<[], [void], "nonpayable">;

  createUnpacked: TypedContractMethod<[], [void], "nonpayable">;

  highScore: TypedContractMethod<[], [bigint], "view">;

  loopActions: TypedContractMethod<
    [actions: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateNumber: TypedContractMethod<
    [countValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateNumberOptimized: TypedContractMethod<
    [countValue: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createPacked"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createUnpacked"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "highScore"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "loopActions"
  ): TypedContractMethod<[actions: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateNumber"
  ): TypedContractMethod<[countValue: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateNumberOptimized"
  ): TypedContractMethod<[countValue: BigNumberish], [void], "nonpayable">;

  filters: {};
}

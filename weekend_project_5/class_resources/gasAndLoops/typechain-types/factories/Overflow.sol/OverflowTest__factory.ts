/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  OverflowTest,
  OverflowTestInterface,
} from "../../Overflow.sol/OverflowTest";

const _abi = [
  {
    inputs: [],
    name: "counter",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "forceIncrement",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "amount",
        type: "uint8",
      },
    ],
    name: "increment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610166806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806361bc221a14610046578063d6b4633014610069578063dbced6281461007e575b600080fd5b6000546100539060ff1681565b60405160ff909116815260200160405180910390f35b61007c6100773660046100d9565b6100a7565b005b61007c61008c3660046100d9565b6000805460ff19811660ff9182169390930116919091179055565b6000805482919081906100be90849060ff16610103565b92506101000a81548160ff021916908360ff16021790555050565b6000602082840312156100eb57600080fd5b813560ff811681146100fc57600080fd5b9392505050565b60ff818116838216019081111561012a57634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220a71273f8f675805fceaf132e98c673db3c9381c5283bdac12de37fd2be7001b664736f6c63430008130033";

type OverflowTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OverflowTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OverflowTest__factory extends ContractFactory {
  constructor(...args: OverflowTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OverflowTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OverflowTest__factory {
    return super.connect(runner) as OverflowTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OverflowTestInterface {
    return new Interface(_abi) as OverflowTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): OverflowTest {
    return new Contract(address, _abi, runner) as unknown as OverflowTest;
  }
}

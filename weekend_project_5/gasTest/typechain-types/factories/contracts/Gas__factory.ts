/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { Gas, GasInterface } from "../../contracts/Gas";

const _abi = [
  {
    inputs: [],
    name: "createPacked",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "createUnpacked",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "highScore",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "actions",
        type: "uint256",
      },
    ],
    name: "loopActions",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "countValue",
        type: "uint256",
      },
    ],
    name: "updateNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "countValue",
        type: "uint256",
      },
    ],
    name: "updateNumberOptimized",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506108ef806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631db05a88146100675780631fca5278146100835780634c6c2ff3146100a15780636da4ddb1146100bd578063d1f108b9146100c7578063fc63cdcc146100e3575b600080fd5b610081600480360381019061007c919061072e565b6100ed565b005b61008b610126565b604051610098919061076a565b60405180910390f35b6100bb60048036038101906100b6919061072e565b61012c565b005b6100c5610168565b005b6100e160048036038101906100dc919061072e565b610405565b005b6100eb610456565b005b5b600154811115610123578080610103906107b4565b91505060016000815480929190610119906107dd565b91905055506100ee565b50565b60005481565b600060025490505b8082111561015d578180610147906107b4565b9250508080610155906107dd565b915050610134565b806002819055505050565b600460405180610160016040528060006fffffffffffffffffffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff168152602001600060ff16815260200160008152602001600067ffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600060ff168152602001600067ffffffffffffffff168152602001600060ff168152602001600063ffffffff16815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a81548160ff021916908360ff16021790555060408201518160000160116101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160000160196101000a81548160ff021916908360ff1602179055506080820151816001015560a08201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c08201518160020160086101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060e08201518160020160186101000a81548160ff021916908360ff1602179055506101008201518160030160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506101208201518160030160086101000a81548160ff021916908360ff1602179055506101408201518160030160096101000a81548163ffffffff021916908363ffffffff1602179055505050565b5b600181111561045357600054600161041e9190610825565b816104299190610888565b6000808282546104399190610825565b92505081905550808061044b906107b4565b915050610406565b50565b60036040518061016001604052806000815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600063ffffffff168152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff1681525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160020160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c08201518160020160186101000a81548163ffffffff021916908363ffffffff16021790555060e082015181600201601c6101000a81548160ff021916908360ff16021790555061010082015181600201601d6101000a81548160ff021916908360ff16021790555061012082015181600201601e6101000a81548160ff021916908360ff16021790555061014082015181600201601f6101000a81548160ff021916908360ff1602179055505050565b600080fd5b6000819050919050565b61070b816106f8565b811461071657600080fd5b50565b60008135905061072881610702565b92915050565b600060208284031215610744576107436106f3565b5b600061075284828501610719565b91505092915050565b610764816106f8565b82525050565b600060208201905061077f600083018461075b565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006107bf826106f8565b9150600082036107d2576107d1610785565b5b600182039050919050565b60006107e8826106f8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361081a57610819610785565b5b600182019050919050565b6000610830826106f8565b915061083b836106f8565b925082820190508082111561085357610852610785565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610893826106f8565b915061089e836106f8565b9250826108ae576108ad610859565b5b82820490509291505056fea2646970667358221220393c2b08aff46d87dd3739b2350566b8da84f253534a7c9b45c2589f1c84441c64736f6c63430008130033";

type GasConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GasConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Gas__factory extends ContractFactory {
  constructor(...args: GasConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Gas & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Gas__factory {
    return super.connect(runner) as Gas__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasInterface {
    return new Interface(_abi) as GasInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Gas {
    return new Contract(address, _abi, runner) as unknown as Gas;
  }
}
